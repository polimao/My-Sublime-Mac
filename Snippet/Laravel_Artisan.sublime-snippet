<snippet>
	<content>
全局相关

	view source
	print?
	01.php artisan：显示详细的命令行帮助信息，同 php artisan list
	02.php artisan –help：显示帮助命令的使用格式，同 php artisan help
	03.php artisan –version：显示当前使用的 Laravel 版本
	04.php artisan changes：列出当前版本相对于上一版本的主要变化
	05.php artisan down：将站点设为维护状态
	06.php artisan up：将站点设回可访问状态
	07.php artisan optimize：优化应用程序性能，生成自动加载文件，且产生聚合编译文件 bootstrap/compiled.php
	08.php artisan dump-autoload：重新生成框架的自动加载文件，相当于 optimize 的再操作
	09.php artisan clear-compiled：清除编译生成的文件，相当于 optimize 的反操作
	10.php artisan migrate：执行数据迁移
	11.php artisan routes：列出当前应用全部的路由规则
	12.php artisan serve：使用 PHP 内置的开发服务器启动应用 【要求 PHP 版本在 5.4 或以上】
	13.php artisan tinker：进入与当前应用环境绑定的 REPL 环境，相当于 Rails 框架的 rails console 命令
	14.php artisan workbench 组织名/包名：这将在应用根目录产生一个名为 workbench 的文件夹，然后按 组织名/包名 的形式生成一个符合 Composer 标准的包结构，并自动安装必要的依赖【需要首先完善好 app/config/workbench.php 文件的内容】

功能相关

	view source
	print?
	01.php artisan cache:clear：清除应用程序缓存
	02.php artisan command:make 命令名：在 app/commands 目录下生成一个名为 命令名.php 的自定义命令文件
	03.php artisan controller:make 控制器名：在 app/controllers 目录下生成一个名为 控制器名.php 的控制器文件
	04.php artisan db:seed：对数据库填充种子数据，以用于测试
	05.php artisan key:generate：生成一个随机的 key，并自动更新到 app/config/app.ph 的 key 键值对
	06.php artisan migrate:install：初始化迁移数据表
	07.php artisan migrate:make 迁移名：这将在 app/database/migrations 目录下生成一个名为 时间+迁移名.php 的数据迁移文件，并自动执行一次 php artisan dump-autoload 命令
	08.php artisan migrate:refresh：重置并重新执行所有的数据迁移
	09.php artisan migrate:reset：回滚所有的数据迁移
	10.php artisan migrate:rollback：回滚最近一次数据迁移
	11.php artisan session:table：生成一个用于 session 的数据迁移文件

</content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>la.Artisan</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
	<description>Artisan</description>
</snippet>
